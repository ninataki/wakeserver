#!/usr/bin/python

import sys
import os
import time
import re
import struct
import subprocess
import json
import requests
from datetime import datetime
from math import modf
from binascii import hexlify

OUTDIR = '/var/run/wakeserver/'

class MitsubishiAC:
    class Code:
        fix1 = b'\x23\xcb\x26\x01\x00'
        fix2 = b'\x02\xc0\x8e\x00\x00\x40\x08\x03\x02'

        def __init__(self, power, mode, temp):
            self.power = power
            self.mode = mode
            self.temp = temp

        def pack(self):
            return self.fix1 + self.power + self.mode + self.temp + self.fix2

    MODE_COOLER = 0
    MODE_HEATER = 1
    TEMP_MIN = 16
    TEMP_MAX = 31

    __name = ''
    __mode = MODE_COOLER
    __temp = 27

    def __init__(self, name):
        self.__name = name

    def setMode(self, mode):
        if mode == self.MODE_COOLER or mode == self.MODE_HEATER:
            return False
        self.__mode = mode
        return True

    def setTemperature(self, temp):
        if temp < self.TEMP_MIN or temp > self.TEMP_MAX:
            return False
        self.__temp = temp
        return True

    def serialize(self, isOn):
        decimal, temp = modf(self.__temp)
        code = self.Code(
            b'\x20' if isOn else b'\x00',
            b'\x58' if self.__mode == self.MODE_COOLER else b'\x48',
            struct.pack('B', 
                        (0x10 if decimal != 0 else 0x00) |
                        int((temp - self.TEMP_MIN)))
        )
        data = code.pack()
        sum = 0
        for c in data:
            num, = struct.unpack('B', c)
            sum += num
        return data + struct.pack('B', sum & 0xff)

    def sendCommand(self, isOn):
        code = self.serialize(isOn)
        pat = re.compile(':.*')
        host = pat.sub('', self.__name)
        cmd = 'irtx ' + host + ' aeha ' + hexlify(code)
        subprocess.call(cmd, shell=True)
        time.sleep(0.1)
        subprocess.call(cmd, shell=True)
        now = datetime.now()
        out = {
            'isOn' : isOn,
            'datetime' : now.strftime('%Y-%m-%d %H:%M:%S')
        }
        with open(OUTDIR + self.__name, mode='w') as f:
            json.dump(out, f)

    def diag(self):
        phost = re.compile(':.*')
        host = phost.sub('', self.__name)
        pshadow = re.compile('.*:')
        shadow = pshadow.sub('', self.__name)
        response = requests.get('http://' + host + '/shadow/' + shadow)
        result = response.json()
        if 'IsOn' in result:
            return result['IsOn']
        return False

def main():
    command = sys.argv[1]
    ipaddr = sys.argv[2]
    macaddr = sys.argv[3]
    interval = int(sys.argv[4])

    ac = MitsubishiAC(ipaddr)

    if command == 'diag':
        time.sleep(interval)
        return 0 if ac.diag() else 1;
    
    elif command == 'on':
        now = datetime.now()
        if now.month >= 5 and now.month <= 10:
            ac.setMode(ac.MODE_COOLER)
            ac.setTemperature(26.5)
            ac.sendCommand(True)
        elif (now.month >= 11 and now.month <= 12) or \
             (now.month >= 1 and now.month <=3):
            ac.setMode(ac.MODE_HEATER)
            ac.setTemperature(23)
            ac.sendCommand(True)
        return 0;

    elif command == 'off':
        ac.sendCommand(False)
        return 0;
    
    return 1

if __name__ == '__main__':
    sys.exit(main())
