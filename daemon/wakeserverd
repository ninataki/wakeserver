#!/usr/bin/python

import os
import sys
import time
import json
import threading
import subprocess

CONF =             "/var/www/wakeserver/servers.conf"
PIDFILE =          "/run/wakeserverd.pid"
STATUS_DIR =       "/run/wakeserver"
STATUS_FILE =      "/run/wakeserver/status"
STATUS_FILE_NEW =  "/run/wakeserver/status.new"
STATUS_FILE_FULL = "/run/wakeserver/status.full"
ERROR_FILE =       "/run/wakeserver/error"
PLUGIN_DIR =       "/var/www/wakeserver/plugin"
INTERVAL =         1
INTERVAL_WRITE =   2
OPERATIVE_MAX =    3
NORMAL_MAX =       7

class Daemon :
    def __init__(self):
        with open(CONF) as f:
            self.conf = json.load(f)
        self.servers = []
        self.statuses = []
        self.operativeServers = []
        self.normalServers = []

        i = 0
        for group in self.conf:
            servers = group["servers"];
            for server in servers:
                self.servers.append(server)
                if "user" in server["scheme"]:
                    del server["scheme"]["user"]
                if "diag" in server["scheme"]:
                    diag = server["scheme"]["diag"]
                    if diag == "normallyoff":
                        server["status"] = "off"
                    elif diag == "alwayson":
                        server["status"] = "on"
                    else:
                        server["status"] = "off"
                        if "on" in server["scheme"] or \
                                "off" in server["scheme"]:
                            self.operativeServers.append(i)
                        else:
                            self.normalServers.append(i)
                self.statuses.append({"status": server["status"]})
                i = i + 1

        with open(STATUS_FILE_FULL, "w") as f1, open(STATUS_FILE, "w") as f2:
            json.dump(self.conf, f1)
            json.dump(self.statuses, f2)

        hfThreadNum = int((len(self.operativeServers) + OPERATIVE_MAX - 1) / \
                              OPERATIVE_MAX)
        nmThreadNum = int((len(self.normalServers) + NORMAL_MAX - 1) / \
                              NORMAL_MAX)

        self.hfThread = []
        for i in range(hfThreadNum):
            self.hfThread.append(threading.Thread(
                target=diagServers, name="th_hf",
                args=(self.servers, self.statuses, 
                      self.operativeServers, INTERVAL,
                      hfThreadNum, i)))
            self.hfThread[i].start()

        self.nmThread = []
        for i in range(nmThreadNum):
            self.nmThread.append(threading.Thread(
                target=diagServers, name="th_nm",
                args=(self.servers, self.statuses,
                      self.normalServers, INTERVAL,
                      nmThreadNum, i)))
            self.nmThread[i].start()

    def run(self):
        while True:
            time.sleep(INTERVAL_WRITE)
            with open(STATUS_FILE_NEW, "w") as f:
                json.dump(self.statuses, f)
            os.rename(STATUS_FILE_NEW, STATUS_FILE)

def diagServers(servers, statuses, targets, interval, groupNum, current):
    while True:
        for i in range(current, len(targets), groupNum):
            server = servers[targets[i]]
            status = statuses[targets[i]]
            diag = server["scheme"]["diag"]
            cmd = ""
            if diag == "ping" or diag == "arp":
                cmd = "ping -c1 -W%d %s >/dev/null" % \
                    (interval, server["ipaddr"])
                arp = "arp %s | tail -1" % (server["ipaddr"])
            elif diag == "custom":
                cmd = "%s/%s diag '%s' '%s' %d" % \
                    (PLUGIN_DIR, 
                     server["scheme"]["type"], 
                     server["ipaddr"], server["macaddr"],
                     interval)

            if cmd != "":
                if os.system(cmd) == 0 :
                    server["status"] = "on"
                    status["status"] = "on"
                    time.sleep(interval)
                else:
                    active = False
                    if diag == "arp" and \
                            subprocess.check_output(arp, shell = True).\
                       split()[1] != '(incomplete)':
                        server["status"] = "on"
                        status["status"] = "on"
                    else:
                        server["status"] = "off"
                        status["status"] = "off"

def main():
    if daemonize(False, False) == 0:
        daemon = Daemon()
        daemon.run()

def daemonize(nochdir, noclose):
    if os.fork() != 0:
        sys.exit(0)
    
    if os.umask(0) < 0:
        return -1
    
    if not nochdir:
        os.chdir("/")

    if not os.path.isdir(STATUS_DIR):
        os.mkdir(STATUS_DIR)
    if not noclose:
        sys.stdin.close()
        sys.stdout.close()
        sys.stderr.close()
        sys.stdin = open("/dev/null", "r")
        sys.stdout = open("/dev/null", "w")
        sys.stderr = open(ERROR_FILE, "w")


    with open(PIDFILE, "w") as f :
        print >> f, "%d" % os.getpid()

    return 0

if __name__ == '__main__':
    main()
    sys.exit(0)
